use crate::emulator::cpu::Cpu;
use crate::emulator::memory::Memory;

use super::alu8;
use super::inst_group::InstGroup::*;
use super::loads::{load16, load8};
use super::opcode::Opcode;
use super::operand::Operands::{self, *};
use super::stack::{pop, push};
use super::{alu16, bits, interrupts, jumps, misc, rotates, stack};

pub fn execute_opcode(cpu: &mut Cpu, memory: &mut Memory, opcode: Opcode) -> i32 {
    let operand1 = opcode.operand1.unwrap_or(Operands::NONE);
    let operand2 = opcode.operand2.unwrap_or(Operands::NONE);

    match opcode.group {
        LD8 => load8(cpu, memory, operand1, operand2),
        LD16 => match opcode.mnemonic.as_str() {
            "LD" => load16(cpu, memory, operand1, operand2),
            "PUSH" => push(cpu, memory, operand1),
            "POP" => pop(cpu, memory, operand1),
            _ => panic!("Invalid Instruction {}", opcode.mnemonic),
        },
        ALU8 => match opcode.mnemonic.as_str() {
            "ADD" => alu8::add(cpu, memory, operand1, operand2),
            "ADC" => alu8::adc(cpu, memory, operand1, operand2),
            "SUB" => alu8::sub(cpu, memory, operand1),
            "SBC" => alu8::sbc(cpu, memory, operand1, operand2),
            "AND" => alu8::and(cpu, memory, operand1),
            "OR" => alu8::or(cpu, memory, operand1),
            "XOR" => alu8::xor(cpu, memory, operand1),
            "CP" => alu8::cp(cpu, memory, operand1),
            "INC" => alu8::inc(cpu, memory, operand1),
            "DEC" => alu8::dec(cpu, memory, operand1),
            "SCF" => alu8::scf(cpu),
            "CCF" => alu8::ccf(cpu),
            "CPL" => alu8::cpl(cpu),
            "DAA" => alu8::daa(cpu),
            _ => panic!("Invalid instruction {}", opcode.mnemonic),
        },
        ALU16 => match opcode.mnemonic.as_str() {
            "ADD" => alu16::add(cpu, memory, operand1, operand2),
            "INC" => alu16::inc(cpu, memory, operand1),
            "DEC" => alu16::dec(cpu, memory, operand1),
            _ => panic!("Invalid instruction {}", opcode.mnemonic),
        },
        RSB8 => match opcode.mnemonic.as_str() {
            "RLA" => rotates::rla(cpu),
            "RRA" => rotates::rra(cpu),
            "RLCA" => rotates::rlca(cpu),
            "RRCA" => rotates::rrca(cpu),
            "RRC" => rotates::rrc(cpu, memory, operand1),
            "SWAP" => misc::swap(cpu, memory, operand1),
            "RR" => rotates::rr(cpu, memory, operand1),
            "RLC" => rotates::rlc(cpu, memory, operand1),
            "RL" => rotates::rl(cpu, memory, operand1),
            "BIT" => bits::bit(cpu, memory, operand1, operand2),
            "SET" => bits::set(cpu, memory, operand1, operand2),
            "SLA" => rotates::sla(cpu, memory, operand1),
            "SRL" => rotates::srl(cpu, memory, operand1),
            "RES" => bits::res(cpu, memory, operand1, operand2),
            "SRA" => rotates::sra(cpu, memory, operand1),
            _ => panic!("Invalid instruction {}", opcode.mnemonic),
        },
        BRANCH => {
            //TODO: Jump have branched cycle
            //Plz add it later
            let does_branch: bool = match opcode.mnemonic.as_str() {
                "JP" => jumps::jpccnn(cpu, memory, operand1, operand2),
                "JPHL" => jumps::jphl(cpu, memory),
                "JR" => jumps::jrccn(cpu, memory, operand1, operand2),
                "RST" => stack::rst(cpu, memory, operand1),
                "CALL" => stack::call_cc(cpu, memory, operand1),
                "RET" => stack::ret_cc(cpu, memory, operand1),
                "RETI" => stack::reti(cpu, memory),
                _ => panic!("Invalid instruction {}", opcode.mnemonic),
            };

            if does_branch {
                return if opcode.cycle.len() == 2 {
                    opcode.cycle[1]
                } else {
                    opcode.cycle[0]
                };
            }
        }
        MISC => match opcode.mnemonic.as_str() {
            "DI" => interrupts::di(cpu),
            "NOP" => (),
            "STOP" => (),
            "HALT" => cpu.halt(memory),
            "EI" => interrupts::ei(cpu),
            _ => panic!("Invalid Instruction {}", opcode.mnemonic),
        },
    }

    opcode.cycle[0]
}

pub fn get_opcode(fetched_byte: u8) -> Result<Opcode, ()> {
    match fetched_byte {
        0x00 => Ok(Opcode::opcode0(MISC, "NOP", 0x00, 1, vec![4])),
        0x01 => Ok(Opcode::opcode2(LD16, "LD", 0x01, 3, vec![12], BC, U16)),
        0x02 => Ok(Opcode::opcode2(LD8, "LD", 0x02, 1, vec![8], AddrBC, A)),
        0x03 => Ok(Opcode::opcode1(ALU16, "INC", 0x03, 1, vec![8], BC)),
        0x04 => Ok(Opcode::opcode1(ALU8, "INC", 0x04, 1, vec![4], B)),
        0x05 => Ok(Opcode::opcode1(ALU8, "DEC", 0x05, 1, vec![4], B)),
        0x06 => Ok(Opcode::opcode2(LD8, "LD", 0x06, 2, vec![8], B, U8)),
        0x07 => Ok(Opcode::opcode0(RSB8, "RLCA", 0x07, 1, vec![4])),
        0x08 => Ok(Opcode::opcode2(LD16, "LD", 0x08, 3, vec![20], AddrU16, SP)),
        0x09 => Ok(Opcode::opcode2(ALU16, "ADD", 0x09, 1, vec![8], HL, BC)),
        0x0a => Ok(Opcode::opcode2(LD8, "LD", 0x0a, 1, vec![8], A, AddrBC)),
        0x0b => Ok(Opcode::opcode1(ALU16, "DEC", 0x0b, 1, vec![8], BC)),
        0x0c => Ok(Opcode::opcode1(ALU8, "INC", 0x0c, 1, vec![4], C)),
        0x0d => Ok(Opcode::opcode1(ALU8, "DEC", 0x0d, 1, vec![4], C)),
        0x0e => Ok(Opcode::opcode2(LD8, "LD", 0x0e, 2, vec![8], C, U8)),
        0x0f => Ok(Opcode::opcode0(RSB8, "RRCA", 0x0f, 1, vec![4])),
        0x10 => Ok(Opcode::opcode0(MISC, "STOP", 0x10, 1, vec![4])),
        0x11 => Ok(Opcode::opcode2(LD16, "LD", 0x11, 3, vec![12], DE, U16)),
        0x12 => Ok(Opcode::opcode2(LD8, "LD", 0x12, 1, vec![8], AddrDE, A)),
        0x13 => Ok(Opcode::opcode1(ALU16, "INC", 0x13, 1, vec![8], DE)),
        0x14 => Ok(Opcode::opcode1(ALU8, "INC", 0x14, 1, vec![4], D)),
        0x15 => Ok(Opcode::opcode1(ALU8, "DEC", 0x15, 1, vec![4], D)),
        0x16 => Ok(Opcode::opcode2(LD8, "LD", 0x16, 2, vec![8], D, U8)),
        0x17 => Ok(Opcode::opcode0(RSB8, "RLA", 0x17, 1, vec![4])),
        0x18 => Ok(Opcode::opcode1(BRANCH, "JR", 0x18, 2, vec![12], I8)),
        0x19 => Ok(Opcode::opcode2(ALU16, "ADD", 0x19, 1, vec![8], HL, DE)),
        0x1a => Ok(Opcode::opcode2(LD8, "LD", 0x1a, 1, vec![8], A, AddrDE)),
        0x1b => Ok(Opcode::opcode1(ALU16, "DEC", 0x1b, 1, vec![8], DE)),
        0x1c => Ok(Opcode::opcode1(ALU8, "INC", 0x1c, 1, vec![4], E)),
        0x1d => Ok(Opcode::opcode1(ALU8, "DEC", 0x1d, 1, vec![4], E)),
        0x1e => Ok(Opcode::opcode2(LD8, "LD", 0x1e, 2, vec![8], E, U8)),
        0x1f => Ok(Opcode::opcode0(RSB8, "RRA", 0x1f, 1, vec![4])),
        0x20 => Ok(Opcode::opcode2(
            BRANCH,
            "JR",
            0x20,
            2,
            vec![8, 12],
            JR_NZ,
            I8,
        )),
        0x21 => Ok(Opcode::opcode2(LD16, "LD", 0x21, 3, vec![12], HL, U16)),
        0x22 => Ok(Opcode::opcode2(LD8, "LD", 0x22, 1, vec![8], AddrHLI, A)),
        0x23 => Ok(Opcode::opcode1(ALU16, "INC", 0x23, 1, vec![8], HL)),
        0x24 => Ok(Opcode::opcode1(ALU8, "INC", 0x24, 1, vec![4], H)),
        0x25 => Ok(Opcode::opcode1(ALU8, "DEC", 0x25, 1, vec![4], H)),
        0x26 => Ok(Opcode::opcode2(LD8, "LD", 0x26, 2, vec![8], H, U8)),
        0x27 => Ok(Opcode::opcode0(ALU8, "DAA", 0x27, 1, vec![4])),
        0x28 => Ok(Opcode::opcode2(
            BRANCH,
            "JR",
            0x28,
            2,
            vec![8, 12],
            JR_Z,
            I8,
        )),
        0x29 => Ok(Opcode::opcode2(ALU16, "ADD", 0x29, 1, vec![8], HL, HL)),
        0x2a => Ok(Opcode::opcode2(LD8, "LD", 0x2a, 1, vec![8], A, AddrHLI)),
        0x2b => Ok(Opcode::opcode1(ALU16, "DEC", 0x2b, 1, vec![8], HL)),
        0x2c => Ok(Opcode::opcode1(ALU8, "INC", 0x2c, 1, vec![4], L)),
        0x2d => Ok(Opcode::opcode1(ALU8, "DEC", 0x2d, 1, vec![4], L)),
        0x2e => Ok(Opcode::opcode2(LD8, "LD", 0x2e, 2, vec![8], L, U8)),
        0x2f => Ok(Opcode::opcode0(ALU8, "CPL", 0x2f, 1, vec![4])),
        0x30 => Ok(Opcode::opcode2(
            BRANCH,
            "JR",
            0x30,
            2,
            vec![8, 12],
            JR_NC,
            I8,
        )),
        0x31 => Ok(Opcode::opcode2(LD16, "LD", 0x31, 3, vec![12], SP, U16)),
        0x32 => Ok(Opcode::opcode2(LD8, "LD", 0x32, 1, vec![8], AddrHLD, A)),
        0x33 => Ok(Opcode::opcode1(ALU16, "INC", 0x33, 1, vec![8], SP)),
        0x34 => Ok(Opcode::opcode1(ALU8, "INC", 0x34, 1, vec![12], AddrHL)),
        0x35 => Ok(Opcode::opcode1(ALU8, "DEC", 0x35, 1, vec![12], AddrHL)),
        0x36 => Ok(Opcode::opcode2(LD8, "LD", 0x36, 2, vec![12], AddrHL, U8)),
        0x37 => Ok(Opcode::opcode0(ALU8, "SCF", 0x37, 1, vec![4])),
        0x38 => Ok(Opcode::opcode2(
            BRANCH,
            "JR",
            0x38,
            2,
            vec![8, 12],
            JR_C,
            I8,
        )),
        0x39 => Ok(Opcode::opcode2(ALU16, "ADD", 0x39, 1, vec![8], HL, SP)),
        0x3a => Ok(Opcode::opcode2(LD8, "LD", 0x3a, 1, vec![8], A, AddrHLD)),
        0x3b => Ok(Opcode::opcode1(ALU16, "DEC", 0x3b, 1, vec![8], SP)),
        0x3c => Ok(Opcode::opcode1(ALU8, "INC", 0x3c, 1, vec![4], A)),
        0x3d => Ok(Opcode::opcode1(ALU8, "DEC", 0x3d, 1, vec![4], A)),
        0x3e => Ok(Opcode::opcode2(LD8, "LD", 0x3e, 2, vec![8], A, U8)),
        0x3f => Ok(Opcode::opcode0(ALU8, "CCF", 0x3f, 1, vec![4])),
        0x40 => Ok(Opcode::opcode2(LD8, "LD", 0x40, 1, vec![4], B, B)),
        0x41 => Ok(Opcode::opcode2(LD8, "LD", 0x41, 1, vec![4], B, C)),
        0x42 => Ok(Opcode::opcode2(LD8, "LD", 0x42, 1, vec![4], B, D)),
        0x43 => Ok(Opcode::opcode2(LD8, "LD", 0x43, 1, vec![4], B, E)),
        0x44 => Ok(Opcode::opcode2(LD8, "LD", 0x44, 1, vec![4], B, H)),
        0x45 => Ok(Opcode::opcode2(LD8, "LD", 0x45, 1, vec![4], B, L)),
        0x46 => Ok(Opcode::opcode2(LD8, "LD", 0x46, 1, vec![8], B, AddrHL)),
        0x47 => Ok(Opcode::opcode2(LD8, "LD", 0x47, 1, vec![4], B, A)),
        0x48 => Ok(Opcode::opcode2(LD8, "LD", 0x48, 1, vec![4], C, B)),
        0x49 => Ok(Opcode::opcode2(LD8, "LD", 0x49, 1, vec![4], C, C)),
        0x4a => Ok(Opcode::opcode2(LD8, "LD", 0x4a, 1, vec![4], C, D)),
        0x4b => Ok(Opcode::opcode2(LD8, "LD", 0x4b, 1, vec![4], C, E)),
        0x4c => Ok(Opcode::opcode2(LD8, "LD", 0x4c, 1, vec![4], C, H)),
        0x4d => Ok(Opcode::opcode2(LD8, "LD", 0x4d, 1, vec![4], C, L)),
        0x4e => Ok(Opcode::opcode2(LD8, "LD", 0x4e, 1, vec![8], C, AddrHL)),
        0x4f => Ok(Opcode::opcode2(LD8, "LD", 0x4f, 1, vec![4], C, A)),
        0x50 => Ok(Opcode::opcode2(LD8, "LD", 0x50, 1, vec![4], D, B)),
        0x51 => Ok(Opcode::opcode2(LD8, "LD", 0x51, 1, vec![4], D, C)),
        0x52 => Ok(Opcode::opcode2(LD8, "LD", 0x52, 1, vec![4], D, D)),
        0x53 => Ok(Opcode::opcode2(LD8, "LD", 0x53, 1, vec![4], D, E)),
        0x54 => Ok(Opcode::opcode2(LD8, "LD", 0x54, 1, vec![4], D, H)),
        0x55 => Ok(Opcode::opcode2(LD8, "LD", 0x55, 1, vec![4], D, L)),
        0x56 => Ok(Opcode::opcode2(LD8, "LD", 0x56, 1, vec![8], D, AddrHL)),
        0x57 => Ok(Opcode::opcode2(LD8, "LD", 0x57, 1, vec![4], D, A)),
        0x58 => Ok(Opcode::opcode2(LD8, "LD", 0x58, 1, vec![4], E, B)),
        0x59 => Ok(Opcode::opcode2(LD8, "LD", 0x59, 1, vec![4], E, C)),
        0x5a => Ok(Opcode::opcode2(LD8, "LD", 0x5a, 1, vec![4], E, D)),
        0x5b => Ok(Opcode::opcode2(LD8, "LD", 0x5b, 1, vec![4], E, E)),
        0x5c => Ok(Opcode::opcode2(LD8, "LD", 0x5c, 1, vec![4], E, H)),
        0x5d => Ok(Opcode::opcode2(LD8, "LD", 0x5d, 1, vec![4], E, L)),
        0x5e => Ok(Opcode::opcode2(LD8, "LD", 0x5e, 1, vec![8], E, AddrHL)),
        0x5f => Ok(Opcode::opcode2(LD8, "LD", 0x5f, 1, vec![4], E, A)),
        0x60 => Ok(Opcode::opcode2(LD8, "LD", 0x60, 1, vec![4], H, B)),
        0x61 => Ok(Opcode::opcode2(LD8, "LD", 0x61, 1, vec![4], H, C)),
        0x62 => Ok(Opcode::opcode2(LD8, "LD", 0x62, 1, vec![4], H, D)),
        0x63 => Ok(Opcode::opcode2(LD8, "LD", 0x63, 1, vec![4], H, E)),
        0x64 => Ok(Opcode::opcode2(LD8, "LD", 0x64, 1, vec![4], H, H)),
        0x65 => Ok(Opcode::opcode2(LD8, "LD", 0x65, 1, vec![4], H, L)),
        0x66 => Ok(Opcode::opcode2(LD8, "LD", 0x66, 1, vec![8], H, AddrHL)),
        0x67 => Ok(Opcode::opcode2(LD8, "LD", 0x67, 1, vec![4], H, A)),
        0x68 => Ok(Opcode::opcode2(LD8, "LD", 0x68, 1, vec![4], L, B)),
        0x69 => Ok(Opcode::opcode2(LD8, "LD", 0x69, 1, vec![4], L, C)),
        0x6a => Ok(Opcode::opcode2(LD8, "LD", 0x6a, 1, vec![4], L, D)),
        0x6b => Ok(Opcode::opcode2(LD8, "LD", 0x6b, 1, vec![4], L, E)),
        0x6c => Ok(Opcode::opcode2(LD8, "LD", 0x6c, 1, vec![4], L, H)),
        0x6d => Ok(Opcode::opcode2(LD8, "LD", 0x6d, 1, vec![4], L, L)),
        0x6e => Ok(Opcode::opcode2(LD8, "LD", 0x6e, 1, vec![8], L, AddrHL)),
        0x6f => Ok(Opcode::opcode2(LD8, "LD", 0x6f, 1, vec![4], L, A)),
        0x70 => Ok(Opcode::opcode2(LD8, "LD", 0x70, 1, vec![8], AddrHL, B)),
        0x71 => Ok(Opcode::opcode2(LD8, "LD", 0x71, 1, vec![8], AddrHL, C)),
        0x72 => Ok(Opcode::opcode2(LD8, "LD", 0x72, 1, vec![8], AddrHL, D)),
        0x73 => Ok(Opcode::opcode2(LD8, "LD", 0x73, 1, vec![8], AddrHL, E)),
        0x74 => Ok(Opcode::opcode2(LD8, "LD", 0x74, 1, vec![8], AddrHL, H)),
        0x75 => Ok(Opcode::opcode2(LD8, "LD", 0x75, 1, vec![8], AddrHL, L)),
        0x76 => Ok(Opcode::opcode0(MISC, "HALT", 0x76, 1, vec![4])),
        0x77 => Ok(Opcode::opcode2(LD8, "LD", 0x77, 1, vec![8], AddrHL, A)),
        0x78 => Ok(Opcode::opcode2(LD8, "LD", 0x78, 1, vec![4], A, B)),
        0x79 => Ok(Opcode::opcode2(LD8, "LD", 0x79, 1, vec![4], A, C)),
        0x7a => Ok(Opcode::opcode2(LD8, "LD", 0x7a, 1, vec![4], A, D)),
        0x7b => Ok(Opcode::opcode2(LD8, "LD", 0x7b, 1, vec![4], A, E)),
        0x7c => Ok(Opcode::opcode2(LD8, "LD", 0x7c, 1, vec![4], A, H)),
        0x7d => Ok(Opcode::opcode2(LD8, "LD", 0x7d, 1, vec![4], A, L)),
        0x7e => Ok(Opcode::opcode2(LD8, "LD", 0x7e, 1, vec![8], A, AddrHL)),
        0x7f => Ok(Opcode::opcode2(LD8, "LD", 0x7f, 1, vec![4], A, A)),
        0x80 => Ok(Opcode::opcode2(ALU8, "ADD", 0x80, 1, vec![4], A, B)),
        0x81 => Ok(Opcode::opcode2(ALU8, "ADD", 0x81, 1, vec![4], A, C)),
        0x82 => Ok(Opcode::opcode2(ALU8, "ADD", 0x82, 1, vec![4], A, D)),
        0x83 => Ok(Opcode::opcode2(ALU8, "ADD", 0x83, 1, vec![4], A, E)),
        0x84 => Ok(Opcode::opcode2(ALU8, "ADD", 0x84, 1, vec![4], A, H)),
        0x85 => Ok(Opcode::opcode2(ALU8, "ADD", 0x85, 1, vec![4], A, L)),
        0x86 => Ok(Opcode::opcode2(ALU8, "ADD", 0x86, 1, vec![8], A, AddrHL)),
        0x87 => Ok(Opcode::opcode2(ALU8, "ADD", 0x87, 1, vec![4], A, A)),
        0x88 => Ok(Opcode::opcode2(ALU8, "ADC", 0x88, 1, vec![4], A, B)),
        0x89 => Ok(Opcode::opcode2(ALU8, "ADC", 0x89, 1, vec![4], A, C)),
        0x8a => Ok(Opcode::opcode2(ALU8, "ADC", 0x8a, 1, vec![4], A, D)),
        0x8b => Ok(Opcode::opcode2(ALU8, "ADC", 0x8b, 1, vec![4], A, E)),
        0x8c => Ok(Opcode::opcode2(ALU8, "ADC", 0x8c, 1, vec![4], A, H)),
        0x8d => Ok(Opcode::opcode2(ALU8, "ADC", 0x8d, 1, vec![4], A, L)),
        0x8e => Ok(Opcode::opcode2(ALU8, "ADC", 0x8e, 1, vec![8], A, AddrHL)),
        0x8f => Ok(Opcode::opcode2(ALU8, "ADC", 0x8f, 1, vec![4], A, A)),
        0x90 => Ok(Opcode::opcode1(ALU8, "SUB", 0x90, 1, vec![4], B)),
        0x91 => Ok(Opcode::opcode1(ALU8, "SUB", 0x91, 1, vec![4], C)),
        0x92 => Ok(Opcode::opcode1(ALU8, "SUB", 0x92, 1, vec![4], D)),
        0x93 => Ok(Opcode::opcode1(ALU8, "SUB", 0x93, 1, vec![4], E)),
        0x94 => Ok(Opcode::opcode1(ALU8, "SUB", 0x94, 1, vec![4], H)),
        0x95 => Ok(Opcode::opcode1(ALU8, "SUB", 0x95, 1, vec![4], L)),
        0x96 => Ok(Opcode::opcode1(ALU8, "SUB", 0x96, 1, vec![8], AddrHL)),
        0x97 => Ok(Opcode::opcode1(ALU8, "SUB", 0x97, 1, vec![4], A)),
        0x98 => Ok(Opcode::opcode2(ALU8, "SBC", 0x98, 1, vec![4], A, B)),
        0x99 => Ok(Opcode::opcode2(ALU8, "SBC", 0x99, 1, vec![4], A, C)),
        0x9a => Ok(Opcode::opcode2(ALU8, "SBC", 0x9a, 1, vec![4], A, D)),
        0x9b => Ok(Opcode::opcode2(ALU8, "SBC", 0x9b, 1, vec![4], A, E)),
        0x9c => Ok(Opcode::opcode2(ALU8, "SBC", 0x9c, 1, vec![4], A, H)),
        0x9d => Ok(Opcode::opcode2(ALU8, "SBC", 0x9d, 1, vec![4], A, L)),
        0x9e => Ok(Opcode::opcode2(ALU8, "SBC", 0x9e, 1, vec![8], A, AddrHL)),
        0x9f => Ok(Opcode::opcode2(ALU8, "SBC", 0x9f, 1, vec![4], A, A)),
        0xa0 => Ok(Opcode::opcode1(ALU8, "AND", 0xa0, 1, vec![4], B)),
        0xa1 => Ok(Opcode::opcode1(ALU8, "AND", 0xa1, 1, vec![4], C)),
        0xa2 => Ok(Opcode::opcode1(ALU8, "AND", 0xa2, 1, vec![4], D)),
        0xa3 => Ok(Opcode::opcode1(ALU8, "AND", 0xa3, 1, vec![4], E)),
        0xa4 => Ok(Opcode::opcode1(ALU8, "AND", 0xa4, 1, vec![4], H)),
        0xa5 => Ok(Opcode::opcode1(ALU8, "AND", 0xa5, 1, vec![4], L)),
        0xa6 => Ok(Opcode::opcode1(ALU8, "AND", 0xa6, 1, vec![8], AddrHL)),
        0xa7 => Ok(Opcode::opcode1(ALU8, "AND", 0xa7, 1, vec![4], A)),
        0xa8 => Ok(Opcode::opcode1(ALU8, "XOR", 0xa8, 1, vec![4], B)),
        0xa9 => Ok(Opcode::opcode1(ALU8, "XOR", 0xa9, 1, vec![4], C)),
        0xaa => Ok(Opcode::opcode1(ALU8, "XOR", 0xaa, 1, vec![4], D)),
        0xab => Ok(Opcode::opcode1(ALU8, "XOR", 0xab, 1, vec![4], E)),
        0xac => Ok(Opcode::opcode1(ALU8, "XOR", 0xac, 1, vec![4], H)),
        0xad => Ok(Opcode::opcode1(ALU8, "XOR", 0xad, 1, vec![4], L)),
        0xae => Ok(Opcode::opcode1(ALU8, "XOR", 0xae, 1, vec![8], AddrHL)),
        0xaf => Ok(Opcode::opcode1(ALU8, "XOR", 0xaf, 1, vec![4], A)),
        0xb0 => Ok(Opcode::opcode1(ALU8, "OR", 0xb0, 1, vec![4], B)),
        0xb1 => Ok(Opcode::opcode1(ALU8, "OR", 0xb1, 1, vec![4], C)),
        0xb2 => Ok(Opcode::opcode1(ALU8, "OR", 0xb2, 1, vec![4], D)),
        0xb3 => Ok(Opcode::opcode1(ALU8, "OR", 0xb3, 1, vec![4], E)),
        0xb4 => Ok(Opcode::opcode1(ALU8, "OR", 0xb4, 1, vec![4], H)),
        0xb5 => Ok(Opcode::opcode1(ALU8, "OR", 0xb5, 1, vec![4], L)),
        0xb6 => Ok(Opcode::opcode1(ALU8, "OR", 0xb6, 1, vec![8], AddrHL)),
        0xb7 => Ok(Opcode::opcode1(ALU8, "OR", 0xb7, 1, vec![4], A)),
        0xb8 => Ok(Opcode::opcode1(ALU8, "CP", 0xb8, 1, vec![4], B)),
        0xb9 => Ok(Opcode::opcode1(ALU8, "CP", 0xb9, 1, vec![4], C)),
        0xba => Ok(Opcode::opcode1(ALU8, "CP", 0xba, 1, vec![4], D)),
        0xbb => Ok(Opcode::opcode1(ALU8, "CP", 0xbb, 1, vec![4], E)),
        0xbc => Ok(Opcode::opcode1(ALU8, "CP", 0xbc, 1, vec![4], H)),
        0xbd => Ok(Opcode::opcode1(ALU8, "CP", 0xbd, 1, vec![4], L)),
        0xbe => Ok(Opcode::opcode1(ALU8, "CP", 0xbe, 1, vec![8], AddrHL)),
        0xbf => Ok(Opcode::opcode1(ALU8, "CP", 0xbf, 1, vec![4], A)),
        0xc0 => Ok(Opcode::opcode1(BRANCH, "RET", 0xc0, 1, vec![8, 20], JR_NZ)),
        0xc1 => Ok(Opcode::opcode1(LD16, "POP", 0xc1, 1, vec![12], BC)),
        0xc2 => Ok(Opcode::opcode2(
            BRANCH,
            "JP",
            0xc2,
            3,
            vec![12, 16],
            JR_NZ,
            U16,
        )),
        0xc3 => Ok(Opcode::opcode1(BRANCH, "JP", 0xc3, 3, vec![16], U16)),
        0xc4 => Ok(Opcode::opcode2(
            BRANCH,
            "CALL",
            0xc4,
            3,
            vec![12, 24],
            JR_NZ,
            U16,
        )),
        0xc5 => Ok(Opcode::opcode1(LD16, "PUSH", 0xc5, 1, vec![16], BC)),
        0xc6 => Ok(Opcode::opcode2(ALU8, "ADD", 0xc6, 2, vec![8], A, U8)),
        0xc7 => Ok(Opcode::opcode1(BRANCH, "RST", 0xc7, 1, vec![16], H00)),
        0xc8 => Ok(Opcode::opcode1(BRANCH, "RET", 0xc8, 1, vec![8, 20], JR_Z)),
        0xc9 => Ok(Opcode::opcode0(BRANCH, "RET", 0xc9, 1, vec![16])),
        0xca => Ok(Opcode::opcode2(
            BRANCH,
            "JP",
            0xca,
            3,
            vec![12, 16],
            JR_Z,
            U16,
        )),
        0xcc => Ok(Opcode::opcode2(
            BRANCH,
            "CALL",
            0xcc,
            3,
            vec![12, 24],
            JR_Z,
            U16,
        )),
        0xcd => Ok(Opcode::opcode1(BRANCH, "CALL", 0xcd, 3, vec![24, 24], U16)),
        0xce => Ok(Opcode::opcode2(ALU8, "ADC", 0xce, 2, vec![8], A, U8)),
        0xcf => Ok(Opcode::opcode1(BRANCH, "RST", 0xcf, 1, vec![16], H08)),
        0xd0 => Ok(Opcode::opcode1(BRANCH, "RET", 0xd0, 1, vec![8, 20], JR_NC)),
        0xd1 => Ok(Opcode::opcode1(LD16, "POP", 0xd1, 1, vec![12], DE)),
        0xd2 => Ok(Opcode::opcode2(
            BRANCH,
            "JP",
            0xd2,
            3,
            vec![12, 16],
            JR_NC,
            U16,
        )),
        0xd4 => Ok(Opcode::opcode2(
            BRANCH,
            "CALL",
            0xd4,
            3,
            vec![12, 24],
            JR_NC,
            U16,
        )),
        0xd5 => Ok(Opcode::opcode1(LD16, "PUSH", 0xd5, 1, vec![16], DE)),
        0xd6 => Ok(Opcode::opcode1(ALU8, "SUB", 0xd6, 2, vec![8], U8)),
        0xd7 => Ok(Opcode::opcode1(BRANCH, "RST", 0xd7, 1, vec![16], H10)),
        0xd8 => Ok(Opcode::opcode1(BRANCH, "RET", 0xd8, 1, vec![8, 20], JR_C)),
        0xd9 => Ok(Opcode::opcode0(BRANCH, "RETI", 0xd9, 1, vec![16])),
        0xda => Ok(Opcode::opcode2(
            BRANCH,
            "JP",
            0xda,
            3,
            vec![12, 16],
            JR_C,
            U16,
        )),
        0xdc => Ok(Opcode::opcode2(
            BRANCH,
            "CALL",
            0xdc,
            3,
            vec![12, 24],
            JR_C,
            U16,
        )),
        0xde => Ok(Opcode::opcode2(ALU8, "SBC", 0xde, 2, vec![8], A, U8)),
        0xdf => Ok(Opcode::opcode1(BRANCH, "RST", 0xdf, 1, vec![16], H18)),
        0xe0 => Ok(Opcode::opcode2(
            LD8,
            "LD",
            0xe0,
            2,
            vec![12],
            AddrFF00_U8,
            A,
        )),
        0xe1 => Ok(Opcode::opcode1(LD16, "POP", 0xe1, 1, vec![12], HL)),
        0xe2 => Ok(Opcode::opcode2(LD8, "LD", 0xe2, 1, vec![8], AddrFF00_C, A)),
        0xe5 => Ok(Opcode::opcode1(LD16, "PUSH", 0xe5, 1, vec![16], HL)),
        0xe6 => Ok(Opcode::opcode1(ALU8, "AND", 0xe6, 2, vec![8], U8)),
        0xe7 => Ok(Opcode::opcode1(BRANCH, "RST", 0xe7, 1, vec![16], H20)),
        0xe8 => Ok(Opcode::opcode2(ALU16, "ADD", 0xe8, 2, vec![16], SP, I8)),
        0xe9 => Ok(Opcode::opcode1(BRANCH, "JPHL", 0xe9, 1, vec![4], HL)),
        0xea => Ok(Opcode::opcode2(LD8, "LD", 0xea, 3, vec![16], AddrU16, A)),
        0xee => Ok(Opcode::opcode1(ALU8, "XOR", 0xee, 2, vec![8], U8)),
        0xef => Ok(Opcode::opcode1(BRANCH, "RST", 0xef, 1, vec![16], H28)),
        0xf0 => Ok(Opcode::opcode2(
            LD8,
            "LD",
            0xf0,
            2,
            vec![12],
            A,
            AddrFF00_U8,
        )),
        0xf1 => Ok(Opcode::opcode1(LD16, "POP", 0xf1, 1, vec![12], AF)),
        0xf2 => Ok(Opcode::opcode2(LD8, "LD", 0xf2, 1, vec![8], A, AddrFF00_C)),
        0xf3 => Ok(Opcode::opcode0(MISC, "DI", 0xf3, 1, vec![4])),
        0xf5 => Ok(Opcode::opcode1(LD16, "PUSH", 0xf5, 1, vec![16], AF)),
        0xf6 => Ok(Opcode::opcode1(ALU8, "OR", 0xf6, 2, vec![8], U8)),
        0xf7 => Ok(Opcode::opcode1(BRANCH, "RST", 0xf7, 1, vec![16], H30)),
        0xf8 => Ok(Opcode::opcode2(LD16, "LD", 0xf8, 2, vec![12], HL, SP_i8)),
        0xf9 => Ok(Opcode::opcode2(LD16, "LD", 0xf9, 1, vec![8], SP, HL)),
        0xfa => Ok(Opcode::opcode2(LD8, "LD", 0xfa, 3, vec![16], A, AddrU16)),
        0xfb => Ok(Opcode::opcode0(MISC, "EI", 0xfb, 1, vec![4])),
        0xfe => Ok(Opcode::opcode1(ALU8, "CP", 0xfe, 2, vec![8], U8)),
        0xff => Ok(Opcode::opcode1(BRANCH, "RST", 0xff, 1, vec![16], H38)),
        _ => Err(()),
    }
}

pub fn get_prefixed_opcode(fetched_byte: u8) -> Opcode {
    match fetched_byte {
        //NOTE: CB Prefixed code have length 2 but I'll use 1 for simplicity.
        0x00 => Opcode::opcode1(RSB8, "RLC", 0x00, 1, vec![8], B),
        0x01 => Opcode::opcode1(RSB8, "RLC", 0x01, 1, vec![8], C),
        0x02 => Opcode::opcode1(RSB8, "RLC", 0x02, 1, vec![8], D),
        0x03 => Opcode::opcode1(RSB8, "RLC", 0x03, 1, vec![8], E),
        0x04 => Opcode::opcode1(RSB8, "RLC", 0x04, 1, vec![8], H),
        0x05 => Opcode::opcode1(RSB8, "RLC", 0x05, 1, vec![8], L),
        0x06 => Opcode::opcode1(RSB8, "RLC", 0x06, 1, vec![16], AddrHL),
        0x07 => Opcode::opcode1(RSB8, "RLC", 0x07, 1, vec![8], A),
        0x08 => Opcode::opcode1(RSB8, "RRC", 0x08, 1, vec![8], B),
        0x09 => Opcode::opcode1(RSB8, "RRC", 0x09, 1, vec![8], C),
        0x0a => Opcode::opcode1(RSB8, "RRC", 0x0a, 1, vec![8], D),
        0x0b => Opcode::opcode1(RSB8, "RRC", 0x0b, 1, vec![8], E),
        0x0c => Opcode::opcode1(RSB8, "RRC", 0x0c, 1, vec![8], H),
        0x0d => Opcode::opcode1(RSB8, "RRC", 0x0d, 1, vec![8], L),
        0x0e => Opcode::opcode1(RSB8, "RRC", 0x0e, 1, vec![16], AddrHL),
        0x0f => Opcode::opcode1(RSB8, "RRC", 0x0f, 1, vec![8], A),
        0x10 => Opcode::opcode1(RSB8, "RL", 0x10, 1, vec![8], B),
        0x11 => Opcode::opcode1(RSB8, "RL", 0x11, 1, vec![8], C),
        0x12 => Opcode::opcode1(RSB8, "RL", 0x12, 1, vec![8], D),
        0x13 => Opcode::opcode1(RSB8, "RL", 0x13, 1, vec![8], E),
        0x14 => Opcode::opcode1(RSB8, "RL", 0x14, 1, vec![8], H),
        0x15 => Opcode::opcode1(RSB8, "RL", 0x15, 1, vec![8], L),
        0x16 => Opcode::opcode1(RSB8, "RL", 0x16, 1, vec![16], AddrHL),
        0x17 => Opcode::opcode1(RSB8, "RL", 0x17, 1, vec![8], A),
        0x18 => Opcode::opcode1(RSB8, "RR", 0x18, 1, vec![8], B),
        0x19 => Opcode::opcode1(RSB8, "RR", 0x19, 1, vec![8], C),
        0x1a => Opcode::opcode1(RSB8, "RR", 0x1a, 1, vec![8], D),
        0x1b => Opcode::opcode1(RSB8, "RR", 0x1b, 1, vec![8], E),
        0x1c => Opcode::opcode1(RSB8, "RR", 0x1c, 1, vec![8], H),
        0x1d => Opcode::opcode1(RSB8, "RR", 0x1d, 1, vec![8], L),
        0x1e => Opcode::opcode1(RSB8, "RR", 0x1e, 1, vec![16], AddrHL),
        0x1f => Opcode::opcode1(RSB8, "RR", 0x1f, 1, vec![8], A),
        0x20 => Opcode::opcode1(RSB8, "SLA", 0x20, 1, vec![8], B),
        0x21 => Opcode::opcode1(RSB8, "SLA", 0x21, 1, vec![8], C),
        0x22 => Opcode::opcode1(RSB8, "SLA", 0x22, 1, vec![8], D),
        0x23 => Opcode::opcode1(RSB8, "SLA", 0x23, 1, vec![8], E),
        0x24 => Opcode::opcode1(RSB8, "SLA", 0x24, 1, vec![8], H),
        0x25 => Opcode::opcode1(RSB8, "SLA", 0x25, 1, vec![8], L),
        0x26 => Opcode::opcode1(RSB8, "SLA", 0x26, 1, vec![16], AddrHL),
        0x27 => Opcode::opcode1(RSB8, "SLA", 0x27, 1, vec![8], A),
        0x28 => Opcode::opcode1(RSB8, "SRA", 0x28, 1, vec![8], B),
        0x29 => Opcode::opcode1(RSB8, "SRA", 0x29, 1, vec![8], C),
        0x2a => Opcode::opcode1(RSB8, "SRA", 0x2a, 1, vec![8], D),
        0x2b => Opcode::opcode1(RSB8, "SRA", 0x2b, 1, vec![8], E),
        0x2c => Opcode::opcode1(RSB8, "SRA", 0x2c, 1, vec![8], H),
        0x2d => Opcode::opcode1(RSB8, "SRA", 0x2d, 1, vec![8], L),
        0x2e => Opcode::opcode1(RSB8, "SRA", 0x2e, 1, vec![16], AddrHL),
        0x2f => Opcode::opcode1(RSB8, "SRA", 0x2f, 1, vec![8], A),
        0x30 => Opcode::opcode1(RSB8, "SWAP", 0x30, 1, vec![8], B),
        0x31 => Opcode::opcode1(RSB8, "SWAP", 0x31, 1, vec![8], C),
        0x32 => Opcode::opcode1(RSB8, "SWAP", 0x32, 1, vec![8], D),
        0x33 => Opcode::opcode1(RSB8, "SWAP", 0x33, 1, vec![8], E),
        0x34 => Opcode::opcode1(RSB8, "SWAP", 0x34, 1, vec![8], H),
        0x35 => Opcode::opcode1(RSB8, "SWAP", 0x35, 1, vec![8], L),
        0x36 => Opcode::opcode1(RSB8, "SWAP", 0x36, 1, vec![16], AddrHL),
        0x37 => Opcode::opcode1(RSB8, "SWAP", 0x37, 1, vec![8], A),
        0x38 => Opcode::opcode1(RSB8, "SRL", 0x38, 1, vec![8], B),
        0x39 => Opcode::opcode1(RSB8, "SRL", 0x39, 1, vec![8], C),
        0x3a => Opcode::opcode1(RSB8, "SRL", 0x3a, 1, vec![8], D),
        0x3b => Opcode::opcode1(RSB8, "SRL", 0x3b, 1, vec![8], E),
        0x3c => Opcode::opcode1(RSB8, "SRL", 0x3c, 1, vec![8], H),
        0x3d => Opcode::opcode1(RSB8, "SRL", 0x3d, 1, vec![8], L),
        0x3e => Opcode::opcode1(RSB8, "SRL", 0x3e, 1, vec![16], AddrHL),
        0x3f => Opcode::opcode1(RSB8, "SRL", 0x3f, 1, vec![8], A),
        0x40 => Opcode::opcode2(RSB8, "BIT", 0x40, 1, vec![8], I(0), B),
        0x41 => Opcode::opcode2(RSB8, "BIT", 0x41, 1, vec![8], I(0), C),
        0x42 => Opcode::opcode2(RSB8, "BIT", 0x42, 1, vec![8], I(0), D),
        0x43 => Opcode::opcode2(RSB8, "BIT", 0x43, 1, vec![8], I(0), E),
        0x44 => Opcode::opcode2(RSB8, "BIT", 0x44, 1, vec![8], I(0), H),
        0x45 => Opcode::opcode2(RSB8, "BIT", 0x45, 1, vec![8], I(0), L),
        0x46 => Opcode::opcode2(RSB8, "BIT", 0x46, 1, vec![16], I(0), AddrHL),
        0x47 => Opcode::opcode2(RSB8, "BIT", 0x47, 1, vec![8], I(0), A),
        0x48 => Opcode::opcode2(RSB8, "BIT", 0x48, 1, vec![8], I(1), B),
        0x49 => Opcode::opcode2(RSB8, "BIT", 0x49, 1, vec![8], I(1), C),
        0x4a => Opcode::opcode2(RSB8, "BIT", 0x4a, 1, vec![8], I(1), D),
        0x4b => Opcode::opcode2(RSB8, "BIT", 0x4b, 1, vec![8], I(1), E),
        0x4c => Opcode::opcode2(RSB8, "BIT", 0x4c, 1, vec![8], I(1), H),
        0x4d => Opcode::opcode2(RSB8, "BIT", 0x4d, 1, vec![8], I(1), L),
        0x4e => Opcode::opcode2(RSB8, "BIT", 0x4e, 1, vec![16], I(1), AddrHL),
        0x4f => Opcode::opcode2(RSB8, "BIT", 0x4f, 1, vec![8], I(1), A),
        0x50 => Opcode::opcode2(RSB8, "BIT", 0x50, 1, vec![8], I(2), B),
        0x51 => Opcode::opcode2(RSB8, "BIT", 0x51, 1, vec![8], I(2), C),
        0x52 => Opcode::opcode2(RSB8, "BIT", 0x52, 1, vec![8], I(2), D),
        0x53 => Opcode::opcode2(RSB8, "BIT", 0x53, 1, vec![8], I(2), E),
        0x54 => Opcode::opcode2(RSB8, "BIT", 0x54, 1, vec![8], I(2), H),
        0x55 => Opcode::opcode2(RSB8, "BIT", 0x55, 1, vec![8], I(2), L),
        0x56 => Opcode::opcode2(RSB8, "BIT", 0x56, 1, vec![16], I(2), AddrHL),
        0x57 => Opcode::opcode2(RSB8, "BIT", 0x57, 1, vec![8], I(2), A),
        0x58 => Opcode::opcode2(RSB8, "BIT", 0x58, 1, vec![8], I(3), B),
        0x59 => Opcode::opcode2(RSB8, "BIT", 0x59, 1, vec![8], I(3), C),
        0x5a => Opcode::opcode2(RSB8, "BIT", 0x5a, 1, vec![8], I(3), D),
        0x5b => Opcode::opcode2(RSB8, "BIT", 0x5b, 1, vec![8], I(3), E),
        0x5c => Opcode::opcode2(RSB8, "BIT", 0x5c, 1, vec![8], I(3), H),
        0x5d => Opcode::opcode2(RSB8, "BIT", 0x5d, 1, vec![8], I(3), L),
        0x5e => Opcode::opcode2(RSB8, "BIT", 0x5e, 1, vec![16], I(3), AddrHL),
        0x5f => Opcode::opcode2(RSB8, "BIT", 0x5f, 1, vec![8], I(3), A),
        0x60 => Opcode::opcode2(RSB8, "BIT", 0x60, 1, vec![8], I(4), B),
        0x61 => Opcode::opcode2(RSB8, "BIT", 0x61, 1, vec![8], I(4), C),
        0x62 => Opcode::opcode2(RSB8, "BIT", 0x62, 1, vec![8], I(4), D),
        0x63 => Opcode::opcode2(RSB8, "BIT", 0x63, 1, vec![8], I(4), E),
        0x64 => Opcode::opcode2(RSB8, "BIT", 0x64, 1, vec![8], I(4), H),
        0x65 => Opcode::opcode2(RSB8, "BIT", 0x65, 1, vec![8], I(4), L),
        0x66 => Opcode::opcode2(RSB8, "BIT", 0x66, 1, vec![16], I(4), AddrHL),
        0x67 => Opcode::opcode2(RSB8, "BIT", 0x67, 1, vec![8], I(4), A),
        0x68 => Opcode::opcode2(RSB8, "BIT", 0x68, 1, vec![8], I(5), B),
        0x69 => Opcode::opcode2(RSB8, "BIT", 0x69, 1, vec![8], I(5), C),
        0x6a => Opcode::opcode2(RSB8, "BIT", 0x6a, 1, vec![8], I(5), D),
        0x6b => Opcode::opcode2(RSB8, "BIT", 0x6b, 1, vec![8], I(5), E),
        0x6c => Opcode::opcode2(RSB8, "BIT", 0x6c, 1, vec![8], I(5), H),
        0x6d => Opcode::opcode2(RSB8, "BIT", 0x6d, 1, vec![8], I(5), L),
        0x6e => Opcode::opcode2(RSB8, "BIT", 0x6e, 1, vec![16], I(5), AddrHL),
        0x6f => Opcode::opcode2(RSB8, "BIT", 0x6f, 1, vec![8], I(5), A),
        0x70 => Opcode::opcode2(RSB8, "BIT", 0x70, 1, vec![8], I(6), B),
        0x71 => Opcode::opcode2(RSB8, "BIT", 0x71, 1, vec![8], I(6), C),
        0x72 => Opcode::opcode2(RSB8, "BIT", 0x72, 1, vec![8], I(6), D),
        0x73 => Opcode::opcode2(RSB8, "BIT", 0x73, 1, vec![8], I(6), E),
        0x74 => Opcode::opcode2(RSB8, "BIT", 0x74, 1, vec![8], I(6), H),
        0x75 => Opcode::opcode2(RSB8, "BIT", 0x75, 1, vec![8], I(6), L),
        0x76 => Opcode::opcode2(RSB8, "BIT", 0x76, 1, vec![16], I(6), AddrHL),
        0x77 => Opcode::opcode2(RSB8, "BIT", 0x77, 1, vec![8], I(6), A),
        0x78 => Opcode::opcode2(RSB8, "BIT", 0x78, 1, vec![8], I(7), B),
        0x79 => Opcode::opcode2(RSB8, "BIT", 0x79, 1, vec![8], I(7), C),
        0x7a => Opcode::opcode2(RSB8, "BIT", 0x7a, 1, vec![8], I(7), D),
        0x7b => Opcode::opcode2(RSB8, "BIT", 0x7b, 1, vec![8], I(7), E),
        0x7c => Opcode::opcode2(RSB8, "BIT", 0x7c, 1, vec![8], I(7), H),
        0x7d => Opcode::opcode2(RSB8, "BIT", 0x7d, 1, vec![8], I(7), L),
        0x7e => Opcode::opcode2(RSB8, "BIT", 0x7e, 1, vec![16], I(7), AddrHL),
        0x7f => Opcode::opcode2(RSB8, "BIT", 0x7f, 1, vec![8], I(7), A),
        0x80 => Opcode::opcode2(RSB8, "RES", 0x80, 1, vec![8], I(0), B),
        0x81 => Opcode::opcode2(RSB8, "RES", 0x81, 1, vec![8], I(0), C),
        0x82 => Opcode::opcode2(RSB8, "RES", 0x82, 1, vec![8], I(0), D),
        0x83 => Opcode::opcode2(RSB8, "RES", 0x83, 1, vec![8], I(0), E),
        0x84 => Opcode::opcode2(RSB8, "RES", 0x84, 1, vec![8], I(0), H),
        0x85 => Opcode::opcode2(RSB8, "RES", 0x85, 1, vec![8], I(0), L),
        0x86 => Opcode::opcode2(RSB8, "RES", 0x86, 1, vec![16], I(0), AddrHL),
        0x87 => Opcode::opcode2(RSB8, "RES", 0x87, 1, vec![8], I(0), A),
        0x88 => Opcode::opcode2(RSB8, "RES", 0x88, 1, vec![8], I(1), B),
        0x89 => Opcode::opcode2(RSB8, "RES", 0x89, 1, vec![8], I(1), C),
        0x8a => Opcode::opcode2(RSB8, "RES", 0x8a, 1, vec![8], I(1), D),
        0x8b => Opcode::opcode2(RSB8, "RES", 0x8b, 1, vec![8], I(1), E),
        0x8c => Opcode::opcode2(RSB8, "RES", 0x8c, 1, vec![8], I(1), H),
        0x8d => Opcode::opcode2(RSB8, "RES", 0x8d, 1, vec![8], I(1), L),
        0x8e => Opcode::opcode2(RSB8, "RES", 0x8e, 1, vec![16], I(1), AddrHL),
        0x8f => Opcode::opcode2(RSB8, "RES", 0x8f, 1, vec![8], I(1), A),
        0x90 => Opcode::opcode2(RSB8, "RES", 0x90, 1, vec![8], I(2), B),
        0x91 => Opcode::opcode2(RSB8, "RES", 0x91, 1, vec![8], I(2), C),
        0x92 => Opcode::opcode2(RSB8, "RES", 0x92, 1, vec![8], I(2), D),
        0x93 => Opcode::opcode2(RSB8, "RES", 0x93, 1, vec![8], I(2), E),
        0x94 => Opcode::opcode2(RSB8, "RES", 0x94, 1, vec![8], I(2), H),
        0x95 => Opcode::opcode2(RSB8, "RES", 0x95, 1, vec![8], I(2), L),
        0x96 => Opcode::opcode2(RSB8, "RES", 0x96, 1, vec![16], I(2), AddrHL),
        0x97 => Opcode::opcode2(RSB8, "RES", 0x97, 1, vec![8], I(2), A),
        0x98 => Opcode::opcode2(RSB8, "RES", 0x98, 1, vec![8], I(3), B),
        0x99 => Opcode::opcode2(RSB8, "RES", 0x99, 1, vec![8], I(3), C),
        0x9a => Opcode::opcode2(RSB8, "RES", 0x9a, 1, vec![8], I(3), D),
        0x9b => Opcode::opcode2(RSB8, "RES", 0x9b, 1, vec![8], I(3), E),
        0x9c => Opcode::opcode2(RSB8, "RES", 0x9c, 1, vec![8], I(3), H),
        0x9d => Opcode::opcode2(RSB8, "RES", 0x9d, 1, vec![8], I(3), L),
        0x9e => Opcode::opcode2(RSB8, "RES", 0x9e, 1, vec![16], I(3), AddrHL),
        0x9f => Opcode::opcode2(RSB8, "RES", 0x9f, 1, vec![8], I(3), A),
        0xa0 => Opcode::opcode2(RSB8, "RES", 0xa0, 1, vec![8], I(4), B),
        0xa1 => Opcode::opcode2(RSB8, "RES", 0xa1, 1, vec![8], I(4), C),
        0xa2 => Opcode::opcode2(RSB8, "RES", 0xa2, 1, vec![8], I(4), D),
        0xa3 => Opcode::opcode2(RSB8, "RES", 0xa3, 1, vec![8], I(4), E),
        0xa4 => Opcode::opcode2(RSB8, "RES", 0xa4, 1, vec![8], I(4), H),
        0xa5 => Opcode::opcode2(RSB8, "RES", 0xa5, 1, vec![8], I(4), L),
        0xa6 => Opcode::opcode2(RSB8, "RES", 0xa6, 1, vec![16], I(4), AddrHL),
        0xa7 => Opcode::opcode2(RSB8, "RES", 0xa7, 1, vec![8], I(4), A),
        0xa8 => Opcode::opcode2(RSB8, "RES", 0xa8, 1, vec![8], I(5), B),
        0xa9 => Opcode::opcode2(RSB8, "RES", 0xa9, 1, vec![8], I(5), C),
        0xaa => Opcode::opcode2(RSB8, "RES", 0xaa, 1, vec![8], I(5), D),
        0xab => Opcode::opcode2(RSB8, "RES", 0xab, 1, vec![8], I(5), E),
        0xac => Opcode::opcode2(RSB8, "RES", 0xac, 1, vec![8], I(5), H),
        0xad => Opcode::opcode2(RSB8, "RES", 0xad, 1, vec![8], I(5), L),
        0xae => Opcode::opcode2(RSB8, "RES", 0xae, 1, vec![16], I(5), AddrHL),
        0xaf => Opcode::opcode2(RSB8, "RES", 0xaf, 1, vec![8], I(5), A),
        0xb0 => Opcode::opcode2(RSB8, "RES", 0xb0, 1, vec![8], I(6), B),
        0xb1 => Opcode::opcode2(RSB8, "RES", 0xb1, 1, vec![8], I(6), C),
        0xb2 => Opcode::opcode2(RSB8, "RES", 0xb2, 1, vec![8], I(6), D),
        0xb3 => Opcode::opcode2(RSB8, "RES", 0xb3, 1, vec![8], I(6), E),
        0xb4 => Opcode::opcode2(RSB8, "RES", 0xb4, 1, vec![8], I(6), H),
        0xb5 => Opcode::opcode2(RSB8, "RES", 0xb5, 1, vec![8], I(6), L),
        0xb6 => Opcode::opcode2(RSB8, "RES", 0xb6, 1, vec![16], I(6), AddrHL),
        0xb7 => Opcode::opcode2(RSB8, "RES", 0xb7, 1, vec![8], I(6), A),
        0xb8 => Opcode::opcode2(RSB8, "RES", 0xb8, 1, vec![8], I(7), B),
        0xb9 => Opcode::opcode2(RSB8, "RES", 0xb9, 1, vec![8], I(7), C),
        0xba => Opcode::opcode2(RSB8, "RES", 0xba, 1, vec![8], I(7), D),
        0xbb => Opcode::opcode2(RSB8, "RES", 0xbb, 1, vec![8], I(7), E),
        0xbc => Opcode::opcode2(RSB8, "RES", 0xbc, 1, vec![8], I(7), H),
        0xbd => Opcode::opcode2(RSB8, "RES", 0xbd, 1, vec![8], I(7), L),
        0xbe => Opcode::opcode2(RSB8, "RES", 0xbe, 1, vec![16], I(7), AddrHL),
        0xbf => Opcode::opcode2(RSB8, "RES", 0xbf, 1, vec![8], I(7), A),
        0xc0 => Opcode::opcode2(RSB8, "SET", 0xc0, 1, vec![8], I(0), B),
        0xc1 => Opcode::opcode2(RSB8, "SET", 0xc1, 1, vec![8], I(0), C),
        0xc2 => Opcode::opcode2(RSB8, "SET", 0xc2, 1, vec![8], I(0), D),
        0xc3 => Opcode::opcode2(RSB8, "SET", 0xc3, 1, vec![8], I(0), E),
        0xc4 => Opcode::opcode2(RSB8, "SET", 0xc4, 1, vec![8], I(0), H),
        0xc5 => Opcode::opcode2(RSB8, "SET", 0xc5, 1, vec![8], I(0), L),
        0xc6 => Opcode::opcode2(RSB8, "SET", 0xc6, 1, vec![16], I(0), AddrHL),
        0xc7 => Opcode::opcode2(RSB8, "SET", 0xc7, 1, vec![8], I(0), A),
        0xc8 => Opcode::opcode2(RSB8, "SET", 0xc8, 1, vec![8], I(1), B),
        0xc9 => Opcode::opcode2(RSB8, "SET", 0xc9, 1, vec![8], I(1), C),
        0xca => Opcode::opcode2(RSB8, "SET", 0xca, 1, vec![8], I(1), D),
        0xcb => Opcode::opcode2(RSB8, "SET", 0xcb, 1, vec![8], I(1), E),
        0xcc => Opcode::opcode2(RSB8, "SET", 0xcc, 1, vec![8], I(1), H),
        0xcd => Opcode::opcode2(RSB8, "SET", 0xcd, 1, vec![8], I(1), L),
        0xce => Opcode::opcode2(RSB8, "SET", 0xce, 1, vec![16], I(1), AddrHL),
        0xcf => Opcode::opcode2(RSB8, "SET", 0xcf, 1, vec![8], I(1), A),
        0xd0 => Opcode::opcode2(RSB8, "SET", 0xd0, 1, vec![8], I(2), B),
        0xd1 => Opcode::opcode2(RSB8, "SET", 0xd1, 1, vec![8], I(2), C),
        0xd2 => Opcode::opcode2(RSB8, "SET", 0xd2, 1, vec![8], I(2), D),
        0xd3 => Opcode::opcode2(RSB8, "SET", 0xd3, 1, vec![8], I(2), E),
        0xd4 => Opcode::opcode2(RSB8, "SET", 0xd4, 1, vec![8], I(2), H),
        0xd5 => Opcode::opcode2(RSB8, "SET", 0xd5, 1, vec![8], I(2), L),
        0xd6 => Opcode::opcode2(RSB8, "SET", 0xd6, 1, vec![16], I(2), AddrHL),
        0xd7 => Opcode::opcode2(RSB8, "SET", 0xd7, 1, vec![8], I(2), A),
        0xd8 => Opcode::opcode2(RSB8, "SET", 0xd8, 1, vec![8], I(3), B),
        0xd9 => Opcode::opcode2(RSB8, "SET", 0xd9, 1, vec![8], I(3), C),
        0xda => Opcode::opcode2(RSB8, "SET", 0xda, 1, vec![8], I(3), D),
        0xdb => Opcode::opcode2(RSB8, "SET", 0xdb, 1, vec![8], I(3), E),
        0xdc => Opcode::opcode2(RSB8, "SET", 0xdc, 1, vec![8], I(3), H),
        0xdd => Opcode::opcode2(RSB8, "SET", 0xdd, 1, vec![8], I(3), L),
        0xde => Opcode::opcode2(RSB8, "SET", 0xde, 1, vec![16], I(3), AddrHL),
        0xdf => Opcode::opcode2(RSB8, "SET", 0xdf, 1, vec![8], I(3), A),
        0xe0 => Opcode::opcode2(RSB8, "SET", 0xe0, 1, vec![8], I(4), B),
        0xe1 => Opcode::opcode2(RSB8, "SET", 0xe1, 1, vec![8], I(4), C),
        0xe2 => Opcode::opcode2(RSB8, "SET", 0xe2, 1, vec![8], I(4), D),
        0xe3 => Opcode::opcode2(RSB8, "SET", 0xe3, 1, vec![8], I(4), E),
        0xe4 => Opcode::opcode2(RSB8, "SET", 0xe4, 1, vec![8], I(4), H),
        0xe5 => Opcode::opcode2(RSB8, "SET", 0xe5, 1, vec![8], I(4), L),
        0xe6 => Opcode::opcode2(RSB8, "SET", 0xe6, 1, vec![16], I(4), AddrHL),
        0xe7 => Opcode::opcode2(RSB8, "SET", 0xe7, 1, vec![8], I(4), A),
        0xe8 => Opcode::opcode2(RSB8, "SET", 0xe8, 1, vec![8], I(5), B),
        0xe9 => Opcode::opcode2(RSB8, "SET", 0xe9, 1, vec![8], I(5), C),
        0xea => Opcode::opcode2(RSB8, "SET", 0xea, 1, vec![8], I(5), D),
        0xeb => Opcode::opcode2(RSB8, "SET", 0xeb, 1, vec![8], I(5), E),
        0xec => Opcode::opcode2(RSB8, "SET", 0xec, 1, vec![8], I(5), H),
        0xed => Opcode::opcode2(RSB8, "SET", 0xed, 1, vec![8], I(5), L),
        0xee => Opcode::opcode2(RSB8, "SET", 0xee, 1, vec![16], I(5), AddrHL),
        0xef => Opcode::opcode2(RSB8, "SET", 0xef, 1, vec![8], I(5), A),
        0xf0 => Opcode::opcode2(RSB8, "SET", 0xf0, 1, vec![8], I(6), B),
        0xf1 => Opcode::opcode2(RSB8, "SET", 0xf1, 1, vec![8], I(6), C),
        0xf2 => Opcode::opcode2(RSB8, "SET", 0xf2, 1, vec![8], I(6), D),
        0xf3 => Opcode::opcode2(RSB8, "SET", 0xf3, 1, vec![8], I(6), E),
        0xf4 => Opcode::opcode2(RSB8, "SET", 0xf4, 1, vec![8], I(6), H),
        0xf5 => Opcode::opcode2(RSB8, "SET", 0xf5, 1, vec![8], I(6), L),
        0xf6 => Opcode::opcode2(RSB8, "SET", 0xf6, 1, vec![16], I(6), AddrHL),
        0xf7 => Opcode::opcode2(RSB8, "SET", 0xf7, 1, vec![8], I(6), A),
        0xf8 => Opcode::opcode2(RSB8, "SET", 0xf8, 1, vec![8], I(7), B),
        0xf9 => Opcode::opcode2(RSB8, "SET", 0xf9, 1, vec![8], I(7), C),
        0xfa => Opcode::opcode2(RSB8, "SET", 0xfa, 1, vec![8], I(7), D),
        0xfb => Opcode::opcode2(RSB8, "SET", 0xfb, 1, vec![8], I(7), E),
        0xfc => Opcode::opcode2(RSB8, "SET", 0xfc, 1, vec![8], I(7), H),
        0xfd => Opcode::opcode2(RSB8, "SET", 0xfd, 1, vec![8], I(7), L),
        0xfe => Opcode::opcode2(RSB8, "SET", 0xfe, 1, vec![16], I(7), AddrHL),
        0xff => Opcode::opcode2(RSB8, "SET", 0xff, 1, vec![8], I(7), A),
    }
}
